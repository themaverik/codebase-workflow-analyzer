{
  "agents": {
    "development": {
      "header": "# Development Agent\n\n",
      "role": "## Role\nSpecialized agent for core development tasks based on SOTA analysis.\n\n",
      "capabilities": "## Capabilities\n\n{capabilities_list}\n",
      "framework_expertise": "## Framework Expertise\n- **Primary**: {primary_framework}\n- **Confidence**: {confidence}%\n"
    },
    "testing": {
      "header": "# Testing Agent\n\n",
      "role": "## Role\nSpecialized agent for testing and quality assurance.\n\n",
      "focus_areas": "## Focus Areas\n- Unit testing\n- Integration testing\n- Code quality validation\n"
    }
  },
  "commands": {
    "header": "# CCPM Workflow Commands\n\n",
    "analysis": "## Analysis Commands\n\n```bash\n# Re-run SOTA analysis\ncodebase-analyzer analyze . --output-dir ./analysis --enable-fusion\n\n# Generate updated documentation\ncodebase-analyzer analyze . --output-dir ./docs --generate-docs\n```\n\n",
    "development": "## Development Commands\n\n{framework_commands}\n",
    "quality_gates": "## Quality Gates\n\n- **Analysis Confidence**: {confidence}%\n- **Context Coverage**: {coverage}%\n"
  },
  "workflow_readme": {
    "header": "# {project_name} - CCPM Workflow\n\n",
    "overview": "## Overview\n\nThis directory contains the complete CCPM (Claude Code Project Management) workflow for systematic development.\n\n{project_summary}\n",
    "structure": "## Workflow Structure\n\n```\n.claude/\n├── CLAUDE.md                 # Always-on project instructions\n├── context/                  # Claude Code Spec context files\n│   ├── product.md           # Business context\n│   ├── tech.md              # Technical context\n│   └── structure.md         # Project structure context\n├── prds/                     # Product Requirements\n│   └── product-requirements.md\n├── epics/                    # User stories and implementation\n│   ├── user-stories.md\n│   └── implementation/\n│       └── epic.md\n├── agents/                   # Specialized AI agents\n│   └── development.md\n└── commands/                 # Workflow commands\n    └── workflow.md\n```\n\n",
    "quick_start": "## Quick Start\n\n1. **Review Context**: Start with `context/` files to understand the project\n2. **Read PRD**: Check `prds/product-requirements.md` for business requirements\n3. **User Stories**: Review `epics/user-stories.md` for feature requirements\n4. **Implementation**: Follow tasks in `epics/implementation/epic.md`\n5. **Commands**: Use `commands/workflow.md` for development commands\n\n",
    "analysis_quality": "## Analysis Quality\n\n- **Code Segments**: {segments_analyzed} analyzed\n- **Analysis Confidence**: {confidence}%\n- **Context Coverage**: {coverage}%\n{fusion_quality}\n",
    "footer": "\n---\n*Generated by SOTA Hierarchical Context-Aware Analysis*\n"
  },
  "implementation_epic": {
    "header": "# Implementation Epic\n\n",
    "overview": "## Overview\n\nImplementation tasks derived from SOTA hierarchical analysis.\n\n",
    "priority_tasks": "## Priority Tasks\n\n{task_list}\n",
    "quality_gates": "## Quality Gates\n\n{quality_criteria}\n",
    "performance_targets": "## Performance Targets\n\n{performance_criteria}\n",
    "footer": "\n---\n*Generated by SOTA Implementation Intelligence*\n"
  },
  "task_template": {
    "header": "### Task {task_number}: {domain_name} Implementation\n\n",
    "details": "**Scope**: {segment_count} code segments\n**Priority**: High\n**Estimated Effort**: Based on {segment_count} segments\n\n",
    "acceptance_criteria": "**Acceptance Criteria**:\n- [ ] Implement {domain_functionality} functionality\n- [ ] Follow existing code patterns\n- [ ] Maintain framework compliance\n- [ ] Add appropriate tests\n\n"
  }
}